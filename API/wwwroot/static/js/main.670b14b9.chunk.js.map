{"version":3,"sources":["app/models/activity.ts","app/models/pagination.ts","app/api/agent.ts","app/models/profiles.ts","app/stores/activityStore.ts","app/stores/profilesStore.ts","app/stores/userStore.ts","app/stores/stores.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfilesCard.tsx","features/activities/dashboard/ActivityItemAttendee.tsx","features/activities/dashboard/ActivityItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationError.tsx","features/users/RegisterForm.tsx","features/activities/home/HomePage.tsx","app/layout/Loading.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDatePicker.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailsChat.tsx","features/activities/details/ActivityDetailsHeader.tsx","features/activities/details/ActivityDetailsInfo.tsx","features/activities/details/ActivityDetailsSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfilesEventCard.tsx","features/profiles/ProfilesEventsMenu.tsx","features/profiles/ProfilesEvents.tsx","features/profiles/ProfilesFollows.tsx","app/common/photos/PhotoCropperWidget.tsx","app/common/photos/PhotoDropzoneWidget.tsx","app/common/photos/PhotoUploadWidget.tsx","features/profiles/ProfilesPhotos.tsx","features/profiles/ProfilesContent.tsx","features/profiles/ProfilesHeader.tsx","features/profiles/ProfilesPage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","category","description","city","venue","date","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","config","stores","commonStore","token","headers","Authorization","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErrors","key","flat","setServerError","Promise","reject","actions","url","get","then","body","post","put","delete","agent","activities","activityList","params","activityDetails","createActivity","updateActivity","deleteActivity","updateAttend","users","current","login","user","register","fbLogin","accessToken","profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollow","loadListFollows","predicate","loadUserActivities","Profiles","displayName","userName","mainPhoto","ActivityStore","activityRegistry","Map","selectedActivity","isLoading","isSubmitting","pagingParams","set","setPredicate","value","includes","forEach","setPagingParams","loadActivities","axiosPagingParams","result","setActivity","setPagination","console","log","runInAction","userStore","isGoing","attendees","some","attendee","isHost","hostUserName","host","find","Date","loadActivityDetail","selectActivity","cancelSelectActivity","submitActivity","newActivity","uuid","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollow","isFollowing","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","ProfilesStore","follows","isUpload","isSetMain","isDeleting","loadingFollows","loadingUserActivities","activeTab","activeEventMenu","setActiveEventMenu","activeMenu","setActiveTab","getProfiles","photo","photos","isMain","setPhoto","p","updateFollowing","following","activityStore","followingsCount","follow","UserStore","fbAccessToken","fbLoading","setToken","modalStore","closeModal","logout","getCurrentUser","photoUrl","getFacebookLoginStatus","window","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","finally","scope","serverError","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profilesStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","map","comment","createAt","unshift","stopHubConnection","stop","clearComments","sendComment","invoke","StoreContext","createContext","useStores","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","onClick","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","loading","e","preventDefault","handleFollow","Card","floated","wrapped","ui","Description","extra","Icon","styles","borderColor","borderWidth","cursor","List","horizontal","Popup","hoverable","trigger","circular","bordered","ActivityItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","groupedActivities","group","sub","ActivityPlaceholder","Placeholder","minHeight","image","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","MyTextInput","props","useField","field","meta","FormField","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","dirty","className","autoComplete","placeholder","type","render","ValidationError","Message","i","validationSchema","Yup","required","matches","isValid","isLoggedIn","Divider","Loading","Dimmer","Loader","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","selected","useParams","nullable","enableReinitialize","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","resetForm","onKeyPress","shiftKey","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","numOfFollowing","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","details","Modal","onClose","Meta","handleItemClick","Tab","Pane","itemsPerRow","PhotoCropperWidget","photoPreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoDropzoneWidget","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","isPhotoMode","setIsPhotoMode","targetMainPhoto","setTargetMainPhoto","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","ProfilesHeader","PrivateRoute","Component","component","rest","location","useLocation","path","HomePage","ActivityDashboard","ActivityForm","ActivityDetails","ProfilesPage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.670b14b9.chunk.js","sourcesContent":["import { Profiles } from \"./profiles\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName: string;\r\n    host?: Profiles;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: Profiles[]\r\n}\r\n\r\nexport interface UserActivity{\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    category: string;\r\n}\r\n\r\nexport class Activity implements Activity{\r\n    constructor(init: ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    city: string = '';\r\n    venue: string = ''; \r\n    date: Date | null = null;\r\n\r\n    constructor(activity?: Activity) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n          }\r\n    }\r\n}","export interface Pagination{\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber: number = 1, pageSize: number = 4){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, {AxiosResponse, AxiosError} from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues, UserActivity } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profiles } from '../models/profiles';\r\nimport { User, UserForm } from '../models/user';\r\nimport { stores } from '../stores/stores';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.interceptors.request.use(config => {\r\n    if(stores.commonStore.token){\r\n        config.headers!.Authorization = `Bearer ${stores.commonStore.token}`; \r\n    }\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(2000);\r\n    \r\n    var pagination = response.headers[\"pagination\"];\r\n    if(pagination){\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('not-found');\r\n            }\r\n            if(data.errors){\r\n                var modelStateErrors = [];\r\n                for(const key in data.errors){\r\n                    if(data.errors[key]){\r\n                        modelStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modelStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            //toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            stores.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst actions = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst activities = {\r\n    activityList: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\r\n    activityDetails: (id: string) => actions.get<Activity>(`/activities/${id}`),\r\n    createActivity: (activity: ActivityFormValues) => actions.post<void>('/activities', activity),\r\n    updateActivity: (activity: ActivityFormValues) => actions.put<void>(`/activities/${activity.id}`, activity),\r\n    deleteActivity: (id: string) => actions.delete<void>(`/activities/${id}`),\r\n    updateAttend: (id: string) => actions.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst users = {\r\n    current: () => actions.get<User>('/account'),\r\n    login: (user: UserForm) => actions.post<User>('account/login', user),\r\n    register: (user: UserForm) => actions.post<User>('account/register', user),\r\n    fbLogin: (accessToken: string) => actions.post<User>(`account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst profiles = {\r\n    get: (username: string) => actions.get<Profiles>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        });\r\n    },\r\n    setMainPhoto: (id: string) => actions.put(`/photos/main/${id}`, {}),\r\n    deletePhoto: (id: string) => actions.delete(`/photos/${id}`),\r\n    updateFollow: (username: string) => actions.put(`/follow/${username}`, {}),\r\n    loadListFollows: (username: string, predicate: string) => actions.get<Profiles[]>(`/follow/${username}?predicate=${predicate}`),\r\n    loadUserActivities: (username: string, predicate: string) => actions.get<UserActivity[]>(`/profiles/${username}/activities/?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    activities,\r\n    users,\r\n    profiles\r\n}\r\n\r\nexport default agent","import { User } from \"./user\";\r\n\r\nexport interface Profiles{\r\n    displayName:string;\r\n    userName: string;\r\n    mainPhoto?:string;\r\n    bio?: string;\r\n    photos: Photo[];\r\n    isFollowing: boolean;\r\n    followersCount: number;\r\n    followingsCount: number\r\n}\r\n\r\nexport class Profiles implements Profiles {\r\n    constructor(user: User){\r\n        this.displayName = user.displayName;\r\n        this.userName = user.userName;\r\n        this.mainPhoto = user.mainPhoto;\r\n    }\r\n}\r\n\r\nexport interface Photo{\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}","import {makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport agent from '../api/agent';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { format } from \"date-fns\";\r\nimport { stores } from \"./stores\";\r\nimport { Profiles } from \"../models/profiles\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore{\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    isLoading: boolean = true;\r\n    isSubmitting: boolean = false; \r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPredicate = (key: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        if(['all', 'isGoing', 'isHost'].includes(key)){\r\n            resetPredicate();\r\n            this.predicate.set(key, true);\r\n        }\r\n        if(key === 'startDate'){\r\n            this.predicate.delete('startDate');\r\n            this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosPagingParams(){\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key, (value as Date).toISOString());\r\n            }\r\n            else{\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity] \r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.isLoading = true;\r\n        try {\r\n            const result = await agent.activities.activityList(this.axiosPagingParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.isLoading = false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = stores.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(attendee => attendee.userName === user.userName);\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n        }\r\n        activity.host = activity.attendees?.find(attendee => attendee.userName === activity.hostUserName);\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    loadActivityDetail = async (id: string) => {\r\n        var activity = this.activityRegistry.get(id);\r\n        if(activity) {\r\n            this.selectActivity(activity);\r\n            return activity;\r\n        }\r\n        var data = await agent.activities.activityDetails(id);\r\n        this.setActivity(data);\r\n        this.selectActivity(data);\r\n        return data;\r\n    }\r\n\r\n    selectActivity = (activity: Activity) => {\r\n        this.selectedActivity = activity;\r\n    }\r\n\r\n    cancelSelectActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    submitActivity = async (activity: ActivityFormValues) => {\r\n        const user = stores.userStore.user;\r\n        var newActivity = new Activity(activity);\r\n        if(activity.id){\r\n            await agent.activities.updateActivity(newActivity);\r\n            let updateActivity = {...this.activityRegistry.get(activity.id), ...activity};\r\n            this.activityRegistry.set(updateActivity.id!, updateActivity as Activity);\r\n            this.selectActivity(updateActivity as Activity);\r\n            return;\r\n        }\r\n        else{\r\n            newActivity.id = uuid();\r\n            await agent.activities.createActivity(newActivity);\r\n            var attendee = new Profiles(user!);\r\n            newActivity.hostUserName = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            this.selectActivity(newActivity);\r\n            return;\r\n        }\r\n    }\r\n\r\n    deleteActivity = (id: string) => {\r\n        runInAction(() =>{\r\n            this.isSubmitting = true;\r\n        })\r\n        agent.activities.deleteActivity(id).then(() => {\r\n            runInAction(() =>{\r\n                this.activityRegistry.delete(id);\r\n                this.isSubmitting = false;\r\n            })\r\n        })\r\n    }\r\n\r\n    updateAttendance = async (id: string) => {\r\n        const user = stores.userStore.user;\r\n        runInAction(() => this.isSubmitting = true);\r\n        try {\r\n            await agent.activities.updateAttend(id);\r\n            if(this.selectedActivity?.isGoing){\r\n                runInAction(() => {\r\n                    this.selectedActivity!.attendees = this.selectedActivity!.attendees?.filter(a => a.userName !== user?.userName);\r\n                    this.selectedActivity!.isGoing = false\r\n                });\r\n            }\r\n            else{\r\n                var attendee = new Profiles(user!);\r\n                runInAction(() => {\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true\r\n                });\r\n            }\r\n            runInAction(() => this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!));\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally{\r\n            runInAction(() => this.isSubmitting = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.isSubmitting = true;\r\n        try {\r\n            await agent.activities.updateAttend(this.selectedActivity!.id);\r\n            runInAction(() =>{\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.isSubmitting = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollow = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.userName === username){\r\n                    attendee.isFollowing ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.isFollowing = !attendee.isFollowing;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { UserActivity } from \"../models/activity\";\r\nimport { Photo, Profiles } from \"../models/profiles\";\r\nimport { stores } from \"./stores\";\r\n\r\nexport default class ProfilesStore{\r\n    profiles: Profiles | null = null;\r\n    follows: Profiles[] = []; \r\n    activityRegistry = new Map<string, UserActivity>();\r\n    isLoading: boolean = false;\r\n    isUpload: boolean = false;\r\n    isSetMain: boolean = false;\r\n    isDeleting: boolean = false;\r\n    isFollowing: boolean = false;\r\n    loadingFollows: boolean = false;\r\n    loadingUserActivities: boolean = false;\r\n    activeTab: number = 0;\r\n    activeEventMenu: string = 'future';\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n        \r\n        reaction(\r\n            () => this.activeTab,\r\n            (activeTab) => {\r\n                if(activeTab === 3 || activeTab === 4){\r\n                    const predicate = activeTab === 3 ? 'followers' : 'followings';\r\n                    this.loadListFollows(predicate);\r\n                }\r\n                if(activeTab === 2){\r\n                    this.activityRegistry.clear();\r\n                    this.loadUserActivities(this.activeEventMenu);\r\n                }\r\n                else{\r\n                    this.activityRegistry.clear();\r\n                    this.follows = [];\r\n                }\r\n            }\r\n        )\r\n\r\n        reaction(\r\n            () => this.activeEventMenu,\r\n            (activeEventMenu) => {\r\n                this.activityRegistry.clear();\r\n                this.loadUserActivities(activeEventMenu);\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveEventMenu = (activeMenu: string) => {\r\n        this.activeEventMenu = activeMenu;\r\n    }\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    loadUserActivities = async (predicate: string) => {\r\n        this.loadingUserActivities = true;\r\n        this.activityRegistry.clear();\r\n        try {\r\n            var result = await agent.profiles.loadUserActivities(this.profiles!.userName, predicate);\r\n            runInAction(() =>{\r\n                result.forEach(activity => {\r\n                    activity.date = new Date(activity.date!);\r\n                    runInAction(() =>{\r\n                        this.activityRegistry.set(activity.id, activity);\r\n                    })\r\n                });\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally{\r\n            runInAction(() =>  this.loadingUserActivities = false);\r\n        }\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if(stores.userStore.user && this.profiles){\r\n            return stores.userStore.user.userName === this.profiles.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getProfiles = async (username: string) => {\r\n        this.isLoading = true\r\n        try {\r\n            var profiles = await agent.profiles.get(username);\r\n            runInAction(() =>this.profiles = profiles)\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() =>this.isLoading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.isUpload = true;\r\n        try {\r\n            var response = await agent.profiles.uploadPhoto(file);\r\n            var photo = response.data;\r\n            runInAction(() =>{\r\n                if(this.profiles){\r\n                    this.profiles.photos.push(photo);\r\n                    if(photo.isMain && stores.userStore.user){\r\n                        stores.userStore.setPhoto(photo.url);\r\n                        this.profiles.mainPhoto = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() =>this.isUpload = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.isSetMain = true;\r\n        try {\r\n            await agent.profiles.setMainPhoto(photo.id);\r\n            stores.userStore.setPhoto(photo.url)\r\n            runInAction(() =>{\r\n                if(this.profiles){\r\n                    this.profiles.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profiles.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profiles.mainPhoto = photo.url;\r\n                }\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() =>this.isSetMain = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (id: string) => {\r\n        this.isDeleting = true;\r\n        try {\r\n            await agent.profiles.deletePhoto(id);\r\n            runInAction(() => {\r\n                if(this.profiles){\r\n                    this.profiles!.photos = this.profiles!.photos.filter(p => p.id !== id);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() =>this.isDeleting = false)\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (userName: string, following: boolean) => {\r\n        this.isFollowing = true\r\n        try {\r\n            await agent.profiles.updateFollow(userName);\r\n            stores.activityStore.updateAttendeeFollow(userName);\r\n            runInAction(() => {\r\n                if(this.profiles && this.profiles.userName !== stores.userStore.user?.userName && this.profiles.userName === userName){\r\n                    following ? this.profiles.followersCount++ : this.profiles.followersCount--;\r\n                    this.profiles.isFollowing = !this.profiles.isFollowing;\r\n                }\r\n                if(this.profiles && this.profiles.userName === stores.userStore.user?.userName){\r\n                    following ? this.profiles.followingsCount++ : this.profiles.followingsCount--;\r\n                }\r\n                this.follows.forEach(follow => {\r\n                    if(follow.userName === userName) {\r\n                        follow.isFollowing ? follow.followersCount-- : follow.followersCount++;\r\n                        follow.isFollowing = !follow.isFollowing;\r\n                    }\r\n                })\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.isFollowing = false)\r\n        }\r\n    }\r\n\r\n    loadListFollows = async (predicate: string) => {\r\n        this.loadingFollows = true;\r\n        try {\r\n            var follows = await agent.profiles.loadListFollows(this.profiles!.userName, predicate);\r\n            runInAction(() => this.follows = follows)\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally{\r\n            runInAction(() => this.loadingFollows = false)\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserForm } from \"../models/user\";\r\nimport { stores } from \"./stores\";\r\n\r\nexport default class UserStore{\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading: boolean = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (user: UserForm) => {\r\n        try {\r\n            const result = await agent.users.login(user);\r\n            stores.commonStore.setToken(result.token);\r\n            runInAction(() => this.user = result);\r\n            history.push('/activities');\r\n            stores.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (user: UserForm) => {\r\n        try {\r\n            const result = await agent.users.register(user);\r\n            stores.commonStore.setToken(result.token);\r\n            runInAction(() => this.user = result);\r\n            history.push('/activities');\r\n            stores.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        stores.commonStore.setToken(null);\r\n        runInAction(() => this.user = null);\r\n        history.push('/');\r\n    }\r\n\r\n    getCurrentUser = async () => {\r\n        try {\r\n            const user = await agent.users.current();\r\n            runInAction(() => this.user = user)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setPhoto = (photoUrl: string) => {\r\n        this.user!.mainPhoto = photoUrl;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if(response.status === 'connected'){\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            console.log(accessToken)\r\n            agent.users.fbLogin(accessToken).then(user => {\r\n                stores.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                });\r\n                history.push('/activities');\r\n            }).catch(error => \r\n                console.log(error)\r\n            ).finally(() => {\r\n                runInAction(() => this.fbLoading = false)\r\n            })\r\n        }\r\n\r\n        if(this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken)\r\n        }\r\n        else{\r\n            window.FB.login(response => \r\n                apiLogin(response.authResponse.accessToken),\r\n            {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\"\r\nimport ActivityStore from \"./activityStore\"\r\nimport CommentStore from \"./commentStore\"\r\nimport CommonStore from \"./commonStore\"\r\nimport ModalStore from \"./modalStore\"\r\nimport ProfilesStore from \"./profilesStore\"\r\nimport UserStore from \"./userStore\"\r\n\r\ninterface Stores{\r\n    activityStore: ActivityStore,\r\n    commonStore: CommonStore,\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profilesStore: ProfilesStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const stores : Stores = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profilesStore: new ProfilesStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(stores)\r\n\r\nexport default function useStores(){\r\n    return useContext(StoreContext)\r\n}","import {makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    serverError: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            (token) => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt', token);\r\n                }\r\n                else{\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n    setServerError = (error: ServerError) => {\r\n        this.serverError = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open: boolean;\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport UserComment from \"../models/comment\";\r\nimport { stores } from \"./stores\";\r\n\r\nexport default class CommentStore{\r\n    comments: UserComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(stores.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_COMMENT_URL + `?activityId=${activityId}`, {\r\n                    accessTokenFactory: () => stores.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the hub connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: UserComment[]) => {\r\n                runInAction(() => {\r\n                    this.comments = comments.map(comment => {\r\n                        comment.createAt = new Date(comment.createAt + 'Z');\r\n                        return comment;\r\n                    });\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: UserComment) => {\r\n                comment.createAt = new Date(comment.createAt);\r\n                runInAction(() => this.comments.unshift(comment));\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping the hub connection', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    sendComment = async (comment: any) => {\r\n        comment.activityId = stores.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', comment);\r\n        } catch (error) {\r\n            console.log('error');\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport useStores from '../stores/stores';\r\n\r\nexport default observer(function NavBar(){\r\n    const {activityStore, userStore:{user, logout}} = useStores();\r\n    return (\r\n        <Menu inverted fixed = \"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style = {{marginRight: 10}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name = \"Activities\"/>\r\n                <Menu.Item >\r\n                    <Button onClick={() => activityStore.cancelSelectActivity()} as={NavLink} to='/creating' positive content = \"Create Activity\"/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.mainPhoto || '/assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport useStores from '../../../app/stores/stores';\r\n\r\nexport default observer(function ActivityFilters(){\r\n    const {activityStore: {predicate, setPredicate}} = useStores();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: 27.2}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active= {predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active= {predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active= {predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date)}\r\n                value={predicate.get('startDate')}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profiles } from '../../app/models/profiles';\r\nimport useStores from '../../app/stores/stores';\r\n\r\ninterface Props {\r\n    profiles: Profiles;\r\n}\r\n\r\nexport default observer(function FollowButton({profiles}: Props){\r\n    const {profilesStore: {updateFollowing, isFollowing}, userStore} = useStores();\r\n\r\n    if(userStore.user?.userName === profiles.userName) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent ,username: string){\r\n        e.preventDefault();\r\n        updateFollowing(username, !profiles.isFollowing);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profiles.isFollowing ? 'Following' : 'Not follow'}/>\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    basic\r\n                    fluid \r\n                    color= {profiles.isFollowing ? 'red' : 'green'}\r\n                    content= {profiles.isFollowing ? 'Unfollow' : 'Follow'}\r\n                    loading={isFollowing}\r\n                    onClick = {e => handleFollow(e, profiles.userName)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Card, Icon, Image} from 'semantic-ui-react';\r\nimport { Profiles } from '../../app/models/profiles';\r\nimport useStores from '../../app/stores/stores';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profiles: Profiles;\r\n}\r\n\r\nexport default observer(function ProfilesCard({profiles}: Props){\r\n\r\n    const {userStore} = useStores();\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profiles.userName}`} color={profiles.isFollowing ? 'orange': 'grey'}>\r\n            <Card.Content>\r\n                <Image size='mini' floated='right' wrapped ui={true} src={profiles.mainPhoto || '/assets/user.png'}/>\r\n                <Card.Header>{profiles.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profiles.followersCount} followers\r\n            </Card.Content>\r\n            {profiles.userName !== userStore.user!.userName && (\r\n                <Card.Content extra>\r\n                    <FollowButton profiles={profiles} />\r\n                </Card.Content>\r\n            )}\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profiles } from '../../../app/models/profiles';\r\nimport ProfileCard from '../../profiles/ProfilesCard';\r\n\r\ninterface Props {\r\n    attendees: Profiles[];\r\n}\r\n\r\nexport default observer(function ActivityItemAttendee({attendees}: Props){\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3,\r\n        cursor: 'pointer'\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.userName}\r\n                    trigger = {\r\n                        <List.Item key={attendee.userName}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.mainPhoto || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.isFollowing ? styles : {cursor: 'pointer'}}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profiles={attendee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityItemAttendee from './ActivityItemAttendee';\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityItem({activity}: Props){\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.mainPhoto || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/details/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`profiles/${activity.host?.userName}`}><strong>{activity.host?.displayName}</strong></Link> \r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity !\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity !\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock'/>{format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/>{activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/details/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport {Header } from 'semantic-ui-react';\r\nimport useStores from '../../../app/stores/stores';\r\nimport ActivityItem from './ActivityItem';\r\n\r\nexport default observer(function ActivityList(){\r\n    const {activityStore} = useStores();\r\n    return(\r\n        <>\r\n            {activityStore.groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityItem key={activity.id} activity={activity}/>\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport useStores from '../../../app/stores/stores';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityPlaceholder from './ActivityPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard(){\r\n    const {activityStore} = useStores();\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleLoadingNext(){\r\n        setLoadingNext(true);\r\n        activityStore.setPagingParams(new PagingParams(activityStore.pagination!.currentPage + 1));\r\n        activityStore.loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() =>{\r\n        activityStore.loadActivities();\r\n    }, [activityStore])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.isLoading && !loadingNext ? (\r\n                    <>\r\n                        <ActivityPlaceholder/>\r\n                        <ActivityPlaceholder/>\r\n                        <ActivityPlaceholder/>\r\n                    </>\r\n                ): (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleLoadingNext}\r\n                        hasMore={!loadingNext && !!activityStore.pagination && activityStore.pagination.currentPage < activityStore.pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n                \r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters/>\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                {loadingNext && (\r\n                    <>\r\n                        <ActivityPlaceholder/>\r\n                        <ActivityPlaceholder/>\r\n                        <ActivityPlaceholder/>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { FormField, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <FormField error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </FormField>\r\n    )\r\n}","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport useStores from '../../app/stores/stores';\r\n\r\nexport default observer(function LoginForm(){\r\n    const {userStore} = useStores();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit = {(values, {setErrors})=> userStore.login(values).catch(error => setErrors({error: \"Invalid username or password !\"}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, dirty, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content = 'Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button\r\n                        disabled = {isSubmitting || !dirty} \r\n                        loading={isSubmitting} \r\n                        positive \r\n                        type='submit' \r\n                        content='Submit'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationError({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((error: any, i: any) => (\r\n                        <Message.Item key={i}>{error}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { Formik, Form, ErrorMessage } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport useStores from '../../app/stores/stores';\r\nimport * as Yup from 'yup';\r\nimport ValidationError from '../errors/ValidationError';\r\n\r\nexport default observer(function RegisterForm(){\r\n    const {userStore} = useStores();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required !'),\r\n        userName: Yup.string().required('The username is required !'),\r\n        email: Yup.string().required('The username is required !').email('Email must be a valid email !'),\r\n        password: Yup.string().required('The password is required !').matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,10}$/, 'Password must contain 6-10 characters, consist of number, lowercase, uppercase.')\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '' , userName: '' ,email: '', password: '', error: null}}\r\n            onSubmit = {(values, {setErrors}) => \r\n                userStore.register(values).catch(error => setErrors({error}))}\r\n            \r\n            validationSchema = {validationSchema}\r\n        >\r\n            {({handleSubmit, isSubmitting, dirty, isValid, errors}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content = 'Register to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='userName' placeholder='Username'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error' render={() => <ValidationError errors={errors.error}/>}\r\n                    />\r\n                    <Button\r\n                        disabled = {isSubmitting || !dirty || !isValid} \r\n                        loading={isSubmitting} \r\n                        positive \r\n                        type='submit' \r\n                        content='Register'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\r\nimport useStores from '../../../app/stores/stores';\r\nimport LoginForm from '../../users/LoginForm';\r\nimport RegisterForm from '../../users/RegisterForm';\r\n\r\nexport default observer(function HomePage(){\r\n    const {userStore, modalStore} = useStores();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\r\n                    Reactivities \r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities'/> \r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities !\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm/>)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                            loading={userStore.fbLoading}\r\n                        />\r\n                    </>\r\n                    \r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    inverted?: boolean,\r\n    content?: string\r\n}\r\n\r\nexport default function Loading({inverted=true, content='Loading...'}: Props){\r\n    return (\r\n        <Dimmer active inverted={inverted}>\r\n            <Loader size='large'>{content}</Loader>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { FormField, Label } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props){\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <FormField error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </FormField>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { FormField, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props){\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <FormField error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options = {props.options}\r\n                placeholder = {props.placeholder}\r\n                value={field.value || null}\r\n                onChange={(e,d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </FormField>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text:'Drinks',value: 'drinks'},\r\n    {text:'Culture',value: 'culture'},\r\n    {text:'Film',value: 'film'},\r\n    {text:'Food',value: 'food'},\r\n    {text:'Music',value: 'music'},\r\n    {text:'Travel',value: 'travel'},\r\n] ","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { FormField, Label } from 'semantic-ui-react';\r\nimport DatePicker,{ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyTextInput(props: Partial<ReactDatePickerProps>){\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <FormField error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </FormField>\r\n    )\r\n}","import { Formik, Form } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport Loading from '../../../app/layout/Loading';\r\nimport useStores from '../../../app/stores/stores';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDatePicker from '../../../app/common/form/MyDatePicker';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { history } from '../../..';\r\n\r\nexport default observer(function ActivityForm(){\r\n    const {activityStore} = useStores();\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required !'),\r\n        description: Yup.string().required('The activity description is required !'),\r\n        category: Yup.string().required(),\r\n        city: Yup.string().required('The city is required !'),\r\n        venue: Yup.string().required('The venue is required !'),\r\n        date: Yup.date().nullable().required('The activity date is required !')\r\n    })\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        activityStore.submitActivity(activity).then(() => {\r\n            history.push(`/details/${activityStore.selectedActivity!.id}`)\r\n        });\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(id){\r\n            activityStore.loadActivityDetail(id).then((activity) => {\r\n                setActivity(new ActivityFormValues(activity))\r\n            })\r\n        }\r\n    }, [activityStore, id])\r\n\r\n    if(!activityStore.selectedActivity && id) return <Loading content = 'Loading select activity...'/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Formik validationSchema={validationSchema} enableReinitialize initialValues={activity} onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <Header content='Activity Details' sub color='teal'/>\r\n                        <MyTextInput name='title' placeholder='Title'/>\r\n                        <MyTextArea rows={4} placeholder='Description' name='description'/>\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category'/>\r\n                        <MyDatePicker \r\n                            placeholderText='Date' \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='dd MMM yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal'/>\r\n                        <MyTextInput placeholder='City' name='city'/>\r\n                        <MyTextInput placeholder='Venue' name='venue'/>\r\n                        <Button\r\n                            disabled = {isSubmitting || !dirty || !isValid} \r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit'\r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader, Button} from 'semantic-ui-react'\r\nimport useStores from '../../../app/stores/stores';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\nexport default observer(function ActivityDetailsChat() {\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const {commentStore, userStore} = useStores();\r\n\r\n    useEffect(() => {\r\n        if(id){\r\n            commentStore.createHubConnection(id);\r\n        }\r\n        return () => commentStore.clearComments();\r\n    }, [commentStore, id])\r\n\r\n    const validationSchema = Yup.object({\r\n        body: Yup.string().required('Comment body cannot be empty!')\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.photo || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                {comment.userName === userStore.user?.userName && (\r\n                                    <Button \r\n                                        basic \r\n                                        color='red' \r\n                                        icon='trash'\r\n                                        floated='right'\r\n                                        size='mini'\r\n                                    />\r\n                                )}\r\n                                \r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>\r\n                                    <strong>{comment.displayName}</strong>\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createAt) + ' ago'}</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>\r\n                                    {comment.body}\r\n                                </Comment.Text>\r\n                                \r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    <Formik\r\n                        onSubmit={(values, {resetForm}) => \r\n                            commentStore.sendComment(values).then(() => resetForm())}\r\n                        initialValues={{body: ''}}\r\n                        validationSchema={validationSchema}\r\n                    >\r\n                        {({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form' style={{marginTop: 20}}>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea\r\n                                                placeholder='Add comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                                rows={4}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if(e.key === 'Enter' && e.shiftKey){\r\n                                                        return;\r\n                                                    }\r\n                                                    if(e.key === 'Enter' && !e.shiftKey){\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport useStores from '../../../app/stores/stores';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailsHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, isSubmitting, cancelActivityToggle}} = useStores();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} ribbon color='red' content='Cancelled'/>\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by \r\n                                    <Link to={`/profile/${activity.host?.userName}`} >\r\n                                        <strong> {activity.host?.displayName}</strong>\r\n                                    </Link>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle} \r\n                            loading = {isSubmitting}\r\n                        />\r\n                        <Button disabled={activity.isCancelled} color='orange' floated='right' as={Link} to={`/updating/${activity.id}`}>\r\n                            Update Event\r\n                        </Button>\r\n                    </>\r\n                    \r\n                ) : activity.isGoing ? (\r\n                    <Button \r\n                        onClick = {() => updateAttendance(activity.id)}\r\n                        loading = {isSubmitting}\r\n                    > Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        onClick = {() => updateAttendance(activity.id)} color='teal'\r\n                        loading = {isSubmitting}\r\n                        disabled={activity.isCancelled}\r\n                    >Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailsInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailsSidebar ({activity : {attendees, host}}: Props) {\r\n    if(!attendees) return null;\r\n    const numOfFollowing = attendees.length;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {numOfFollowing} {numOfFollowing === 1 ? ' Person Going' : ' People Going'} \r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map((attendee) =>(\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {host?.userName === attendee.userName && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image size='tiny' src={attendee.mainPhoto || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.isFollowing && (<Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>)}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport {useParams } from 'react-router-dom';\r\nimport {Grid} from 'semantic-ui-react';\r\nimport Loading from '../../../app/layout/Loading';\r\nimport useStores from '../../../app/stores/stores';\r\nimport ActivityDetailsChat from './ActivityDetailsChat';\r\nimport ActivityDetailsHeader from './ActivityDetailsHeader';\r\nimport ActivityDetailsInfo from './ActivityDetailsInfo';\r\nimport ActivityDetailsSidebar from './ActivityDetailsSidebar';\r\n\r\n\r\nexport default observer(function ActivityDetails(){\r\n    const {activityStore} = useStores();\r\n    const {selectedActivity, cancelSelectActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n    useEffect(()=> {\r\n        if(id){\r\n            activityStore.loadActivityDetail(id);\r\n        }\r\n        return () => cancelSelectActivity();\r\n    },[activityStore, id, cancelSelectActivity]);\r\n\r\n    if(!selectedActivity) return <Loading content = 'Loading select activity...'/>\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailsHeader activity={selectedActivity!} />\r\n                <ActivityDetailsInfo activity={selectedActivity!} />\r\n                <ActivityDetailsChat />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailsSidebar activity = {selectedActivity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Oops - We've looked everywhere and could not found this !!!\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities Page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport useStores from '../../app/stores/stores';\r\n\r\nexport default observer(function ServerError(){\r\n    const {commonStore} = useStores();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.serverError?.message} />\r\n            {commonStore.serverError?.details && (\r\n                <Segment>\r\n                    <Header as='h4' content='Stack Trace' color='teal'/>\r\n                    <code style={{marginTop: '10px'}}>{commonStore.serverError?.details}</code>\r\n                </Segment>\r\n            )}\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport useStores from '../../stores/stores';\r\n\r\nexport default observer(function ModalContainer(){\r\n    const {modalStore} = useStores();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Card, Image} from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: UserActivity;\r\n}\r\n\r\nexport default observer(function ProfilesEventCard({activity}: Props){\r\n\r\n    return (\r\n        <Card as={Link} to={`/details/${activity.id}`}>\r\n            <Image size='massive' wrapped ui={true} src={`/assets/categoryImages/${activity.category}.jpg`} />\r\n            <Card.Content>\r\n                <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                <Card.Meta textAlign='center'>\r\n                    <span className='date'>{format(activity.date!, 'dd MMM yyyy')}</span>\r\n                </Card.Meta>\r\n                <Card.Meta textAlign='center'>\r\n                    <span className='date'>{format(activity.date!, 'h:mm aa')}</span>\r\n                </Card.Meta>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport useStores from '../../app/stores/stores';\r\n\r\nexport default observer(function ProfilesEventsMenu()  {\r\n    const {profilesStore} = useStores();\r\n    const {activeEventMenu, setActiveEventMenu, loadingUserActivities} = profilesStore;\r\n\r\n    function handleItemClick(activeMenu: string){\r\n        setActiveEventMenu(activeMenu);\r\n    }\r\n\r\n    return (\r\n        <Menu pointing secondary>\r\n            <Menu.Item\r\n                name='Future Events'\r\n                active={activeEventMenu === 'future'}\r\n                disabled = {activeEventMenu !== 'future' && loadingUserActivities}\r\n                onClick={() => handleItemClick('future')}\r\n            />\r\n            <Menu.Item\r\n                name='Past Events'\r\n                active={activeEventMenu === 'past'}\r\n                disabled = {activeEventMenu !== 'past' && loadingUserActivities}\r\n                onClick={() => handleItemClick('past')}\r\n            />\r\n            <Menu.Item\r\n                name='Hosting'\r\n                active={activeEventMenu === 'hosting'}\r\n                disabled = {activeEventMenu !== 'hosting' && loadingUserActivities}\r\n                onClick={() => handleItemClick('hosting')}\r\n            />\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab, Grid, Header, Card, Loader, Dimmer } from 'semantic-ui-react';\r\nimport useStores from '../../app/stores/stores';\r\nimport ProfilesEventCard from './ProfilesEventCard';\r\nimport ProfilesEventsMenu from './ProfilesEventsMenu';\r\n\r\nexport default observer(function ProfilesEvents(){\r\n    const {profilesStore} = useStores();\r\n    const {activitiesByDate, loadingUserActivities} = profilesStore;\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='playstation' content='Activities'/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <ProfilesEventsMenu />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {loadingUserActivities ? (\r\n                        <Dimmer active inverted style={{marginTop: 25}}>\r\n                            <Loader size='medium' inverted content='Loading activities...'/>\r\n                        </Dimmer>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={4}>\r\n                            {activitiesByDate.map(activity => (\r\n                                <ProfilesEventCard key={activity.id} activity = {activity} />\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport useStores from '../../app/stores/stores';\r\nimport ProfilesCard from './ProfilesCard';\r\n\r\nexport default observer(function ProfilesFollows(){\r\n\r\n    const {profilesStore} = useStores();\r\n    const {loadingFollows, follows, profiles, activeTab} = profilesStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollows}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profiles?.displayName}` : `People ${profiles?.displayName} is following`}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {follows.map(follow => (\r\n                            <ProfilesCard key={follow.userName} profiles={follow} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    photoPreview: string;\r\n    setCropper: (cropper: Cropper) => void\r\n}\r\n\r\nexport default function PhotoCropperWidget({photoPreview, setCropper}: Props){\r\n    return (\r\n        <Cropper\r\n            src={photoPreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoDropzoneWidget ({setFiles}: Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop photo here...'/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoCropperWidget from './PhotoCropperWidget';\r\nimport PhotoDropzoneWidget from './PhotoDropzoneWidget';\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({uploadPhoto, loading}: Props){\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4} textAlign='center'>\r\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoDropzoneWidget setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={5} textAlign='center'>\r\n                <Header sub color='teal' content='Step 2 - Resize Photo'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoCropperWidget setCropper={setCropper} photoPreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={5} textAlign='center'>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={4}/>\r\n            <Grid.Column width={8}>\r\n                {files && files.length > 0 && (\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={4}/>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/photos/PhotoUploadWidget';\r\nimport { Photo, Profiles } from '../../app/models/profiles';\r\nimport useStores from '../../app/stores/stores';\r\n\r\ninterface Props {\r\n    profiles: Profiles | null;\r\n}\r\n\r\nexport default observer(function ProfilesPhotos({profiles}: Props){\r\n    const {profilesStore: {isCurrentUser, uploadPhoto, isUpload, isSetMain, setMainPhoto, isDeleting, deletePhoto}} = useStores();\r\n    const [isPhotoMode, setIsPhotoMode] = useState(false);\r\n    const [targetMainPhoto, setTargetMainPhoto] = useState('');\r\n\r\n    function handleUploadPhoto(file: Blob){\r\n        uploadPhoto(file).then(() => setIsPhotoMode(false))\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo){\r\n        setTargetMainPhoto(photo.id);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo){\r\n        setTargetMainPhoto(photo.id);\r\n        deletePhoto(photo.id);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos'/>\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' \r\n                            basic \r\n                            content = {isPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick = {() => setIsPhotoMode(!isPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {isPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto = {handleUploadPhoto} loading = {isUpload}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profiles!.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color={photo.isMain ? 'blue' : 'green'}\r\n                                                icon={photo.isMain ? 'eye' : 'check'}\r\n                                                disabled={photo.isMain}\r\n                                                onClick = {() => handleSetMainPhoto(photo)}\r\n                                                loading={isSetMain && photo.id === targetMainPhoto}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                onClick={() => handleDeletePhoto(photo)}\r\n                                                disabled={photo.isMain}\r\n                                                loading={isDeleting && photo.id === targetMainPhoto}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profiles } from '../../app/models/profiles';\r\nimport useStores from '../../app/stores/stores';\r\nimport ProfilesEvents from './ProfilesEvents';\r\nimport ProfilesFollows from './ProfilesFollows';\r\nimport ProfilesPhotos from './ProfilesPhotos';\r\n\r\ninterface Props {\r\n    profiles: Profiles | null;\r\n}\r\n\r\nexport default observer(function ProfilesContent({profiles}: Props){\r\n    const {profilesStore} = useStores();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <Tab.Pane>About</Tab.Pane>},\r\n        {menuItem: 'Photos', render: () => <ProfilesPhotos profiles={profiles}/>},\r\n        {menuItem: 'Events', render: () => <ProfilesEvents />},\r\n        {menuItem: 'Followers', render: () => <ProfilesFollows/>},\r\n        {menuItem: 'Following', render: () => <ProfilesFollows/>}\r\n    ]\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition = 'right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profilesStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport {Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profiles } from '../../app/models/profiles';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profiles: Profiles | null;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profiles}: Props){\r\n    \r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profiles?.mainPhoto || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profiles?.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profiles?.followersCount}/>\r\n                        <Statistic label='Following' value={profiles?.followingsCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    {profiles && (\r\n                        <FollowButton profiles={profiles} />\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport Loading from '../../app/layout/Loading';\r\nimport useStores from '../../app/stores/stores';\r\nimport ProfilesContent from './ProfilesContent';\r\nimport ProfilesHeader from './ProfilesHeader';\r\n\r\nexport default observer(function ProfilesPage(){\r\n    const {username} = useParams<{username: string}>();\r\n\r\n    const {profilesStore} = useStores();\r\n    const {isLoading, getProfiles, profiles} = profilesStore;\r\n\r\n    useEffect(() => {\r\n        profilesStore.getProfiles(username);\r\n    }, [profilesStore, getProfiles, username])\r\n\r\n    if(isLoading) return <Loading content = 'Loading profiles...'/>\r\n    \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width=\"16\">\r\n                <ProfilesHeader profiles={profiles}/>\r\n                <ProfilesContent profiles={profiles}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport useStores from \"../stores/stores\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<any> | React.ComponentType<RouteComponentProps<any>>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props){\r\n    const {userStore} = useStores();\r\n    const {isLoggedIn} = userStore;\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render = {(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/activities/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport useStores from '../stores/stores';\nimport Loading from './Loading';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilesPage from '../../features/profiles/ProfilesPage';\nimport PrivateRoute from './PrivateRoute';\n\nexport default observer(function App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStores();\n\n  useEffect(() => {\n    if(commonStore.token){\n      userStore.getCurrentUser().finally(() => commonStore.setAppLoaded());\n    }\n    else{\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore]);\n\n  if(!commonStore.appLoaded) return <Loading content = 'Loading app...'/>\n\n  return (\n    <>\n      <ToastContainer position=\"top-right\"/>\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage}/>\n      <Route \n        path='/(.+)' \n        render = {() => (\n          <>\n            <NavBar/>\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute path='/activities' component={ActivityDashboard}/>\n                <PrivateRoute key={location.key} path={['/creating', '/updating/:id']} component={ActivityForm}/>\n                <PrivateRoute path='/details/:id' component={ActivityDetails}/>\n                <PrivateRoute path='/profiles/:username' component={ProfilesPage}/>\n                <PrivateRoute path='/errors' component={TestErrors}/>\n                <Route path='/server-error' component={ServerError}/>\n                <Route component={NotFound}/>\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'semantic-ui-css/semantic.min.css'; \nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { StoreContext, stores } from './app/stores/stores';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={stores}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App/>\n    </Router>\n  </StoreContext.Provider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}